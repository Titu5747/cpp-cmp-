A binary string is called a self-destructing string if it can reduced to an empty string by performing the 
following operation some number of times (possibly zero): Choose a valid integer i such that the i-th character of 
the current string is different from the i+1-th character, and remove these two characters from the string.

You are given a binary string s. Your task is to convert s to a self-destructing string. To do that, you may 
perform the following operation any number of times (possibly zero): Choose an integer i (1≤i≤|s|−1) such that the 
i-th character of s is different from the i+1-th character, and invert one of these characters (inverting a character means 
changing '0' to '1' or '1' to '0', e.g. the string "01" can be changed to "00").

Find the smallest number of operations required to convert s to a self-destructing string or determine that it is impossible.


Example Input
3
001101
1101
110
Example Output
0
1
-1

#include<iostream>
using namespace std;
int main(void){
    int t;
    cin>>t;
    while(t-->0){
        string s;
        cin>>s;
        int count1=0,count2=0;
        for(int i=0;i<s.length();i++){
            if(s[i]=='0'){
                count1++;
            }
            if(s[i]=='1'){
                count2++;
            }
        }
        if(count1==count2){
            cout<<0<<endl;
        }
        else if((count1+count2)%2!=0||count1==0 || count2==0){
            cout<<-1<<endl;
        }
        else{
            cout<<abs((count1-count2))/2<<endl;
        }
    }
}
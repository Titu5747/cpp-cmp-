Given two strings A and B of lowercase letters, return true if you can swap two letters in A so the result is equal to B, otherwise, return false.

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at A[i] and A[j]. For example, swapping at indices 0 and 2 in "abcd" results in "cbad".

 

Example 1:

Input: A = "ab", B = "ba"
Output: true
Explanation: You can swap A[0] = 'a' and A[1] = 'b' to get "ba", which is equal to B.
Example 2:

Input: A = "ab", B = "ab"
Output: false
Explanation: The only letters you can swap are A[0] = 'a' and A[1] = 'b', which results in "ba" != B.
Example 3:

Input: A = "aa", B = "aa"
Output: true
Explanation: You can swap A[0] = 'a' and A[1] = 'a' to get "aa", which is equal to B.
Example 4:

Input: A = "aaaaaaabc", B = "aaaaaaacb"
Output: true
Example 5:

Input: A = "", B = "aa"
Output: false



#include<iostream>
#include<vector>
using namespace std;
bool buddyString(string a,string b){
        if(a.length()!=b.length() || a.length()==0 ||b.length()==0){
            return false;
        }
        vector<int>vec;
        if(a.length()==b.length()){
            for(int i=0;i<a.length();i++){
                if(a[i]!=b[i]){
                    vec.push_back(i);
                }
                else if(vec.size()>2){
                    return false;
                }
            }
        }
        if(vec.size()==1){
            return false;
        }
        if(vec.size()==2){
            if(a[vec[0]]==b[vec[1]] ||a[vec[1]]==a[vec[0]]){
                return true;
            }
            else{
                return false;
            }
        }
}
int main(void){
      bool a;
      cout.setf(ios::boolalpha);
      a=buddyString("aaaaaaabc","aaaaaaacb");
      cout<<a;
}

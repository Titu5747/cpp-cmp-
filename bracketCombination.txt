Bracket Combinations
Have the function BracketCombinations(num) read num which will be an integer greater than or equal to zero, and return the number of valid 
combinations that can be formed with num pairs of parentheses. For example, if the input is 3, then the possible combinations of
 3 pairs of parenthesis, namely: ()()(), are ()()(), ()(()), (())(), ((())), and (()()). 
There are 5 total combinations when the input is 3, so your program should return 5.
Examples
Input: 3
Output: 5
Input: 2
Output: 2


#include <iostream>
#include <string>
using namespace std;

int BracketCombinations(int num) {
    int dp[num+1];
  dp[0]=1;
  for(int i=1;i<=num;i++){
    int temp=0;
    for(int j=0;j<i;j++){
      temp=temp+dp[j]*dp[i-j-1];
    }
    dp[i]=temp;
  }
  return dp[num];
}

int main(void) { 
   
  // keep this function call here
  cout << BracketCombinations(coderbyteInternalStdinFunction(stdin));
  return 0;
    
}